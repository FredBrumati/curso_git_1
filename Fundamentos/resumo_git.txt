✅ Checklist: Iniciando um Projeto com Git

📁 1. Vá até a pasta do projeto
cd nome-da-pasta

🌀 2. Inicie o repositório Git
git init
☑️ Agora a pasta está sendo rastreada pelo Git.

🗂️ 3. Crie qualquer arquivo EX(texto.txt alguma_coisa.py)
→ Necessário para os proximos passos

➕ 4. Adicione os arquivos ao Git
git add .

📝 5. Faça o primeiro commit
git commit -a -m "primeiro commit"

🔀 6. git branch -M main
Esse comando renomeia a branch atual para "main".
git branch -M main

🌐 7. Crie um repositório no GitHub
→ Vá para github.com, clique em "New Repository" e crie um repositório vazio (sem README).

🔗 8. Conecte seu projeto local ao GitHub
git remote add origin (Link fornecido)

🚀 9. Envie seu projeto para o GitHub
git push -u origin master

-------------------------------------------------------------------------------------------------------------------------

🧾 Ordem para envio de um repositório:
git add . → Adiciona todos os arquivos modificados

git commit -a -m "mensagem" → Salva o commit com uma mensagem

git push → Envia o commit para o GitHub
💡 Obs: git commit -a -m não inclui arquivos novos — apenas os que já foram rastreados anteriormente com git add


📌 Comandos principais do Git:
git add (nome do arquivo) → Adiciona um arquivo específico ao projeto

git add . → Adiciona todos os arquivos modificados  📍

git status → Mostra o status atual dos arquivos no projeto

git commit (nome do arquivo) -m "mensagem" → Faz commit de um arquivo com mensagem

git commit -a -m "mensagem" → Faz commit de todos os arquivos já adicionados  📍

git push → Envia os commits locais para o GitHub  📍

git pull → Baixa atualizações do GitHub para o seu projeto local

git clone (link HTTPS) . → Clona um repositório (na pasta atual)
⚠️ Use com cuidado: se a pasta não estiver vazia, pode dar erro. O mais comum é: git clone (link HTTPS)


Manipulação de arquivos:
git rm (nome do arquivo) → Remove um arquivo do repositório
⚠️ Precisa fazer os passos (2) e (3) da ordem de envio após isso.

git mv (arquivo) (pasta/arquivo) → Move um arquivo para uma pasta
⚠️ Também exige commit e push depois.

git mv (arquivo) (novo_nome) → Renomeia um arquivo
⚠️ Também exige commit e push depois.

git checkout (nome do arquivo) → Reverte um arquivo para a última versão salva
✅ Ainda funciona, mas o Git moderno recomenda usar: git restore (nome do arquivo)

🧱 .gitignore
O arquivo .gitignore define quais arquivos e pastas devem ser ignorados pelo Git. 📍
Exemplos:
Ignorar um arquivo:
texto.txt
Ignorar todos os arquivos de uma pasta:
assets/*
⚠️ Todos os arquivos dentro da pasta serão ignorados.

♻️ Reset de repositório
git reset --hard origin/master
→ Restaura o repositório local para o estado do GitHub (apaga commits locais que não foram enviados).

-------------------------------------------------------------------------------------------------------------------------
🌿 Branch (Ramificações no Git)
Uma branch é como uma "linha do tempo paralela" do projeto, usada para desenvolver funcionalidades sem interferir no código principal.

🔹 Conceito
Quando um projeto Git é criado, ele inicia na branch padrão chamada master (ou main, no padrão mais atual).
Por padrão, você está trabalhando nela até criar uma nova branch.
Cada nova funcionalidade ou correção geralmente é feita em uma branch separada, para evitar conflitos e manter o código organizado.
🛠️ Vantagens de usar branches:
✅ Permite desenvolver novas ideias sem afetar o código estável
✅ Facilita o trabalho em equipe (cada pessoa pode trabalhar em uma branch diferente)
✅ Ajuda a organizar e revisar as mudanças antes de integrá-las ao projeto principal

-------------------------------------------------------------------------------------------------------------------------
git branch → para visualizar os branchs disponíveis
git branch <nome> → Para Criar um branch
flag com git branch -d <nome> ou --delete <nome> → para deletar um branch (Não é comum deletar, normalmente guardamos no hitórico do trabahlo.)
git checkout <nome> → Podemos mudar para outro branch
flag git checkout -b → Cria e muda para o branch
git marge <nome> → O código de dois branches destintos pode ser unidos

git stash → Para salvar modificações atuais para prosseguir com uma outra abordagem de solução e não perder o codigo
git stash list → para vereficar as stashs criadas 
git stash <nome> → para recuperar a stash 
git stash show -p <nome> → Para ver e verificar oque foi modificado na stash
git stash apply <nome> → Volta a stash para a branch
git stash clear → Para remover todas as stash criadas em um branch
git stash drop <nome> → Para remover uma específica 
