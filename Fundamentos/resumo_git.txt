✅ Checklist: Iniciando um Projeto com Git

📁 1. Vá até a pasta do projeto
cd nome-da-pasta

🌀 2. Inicie o repositório Git
git init
☑️ Agora a pasta está sendo rastreada pelo Git.

🗂️ 3. Crie qualquer arquivo EX(texto.txt alguma_coisa.py)
→ Necessário para os proximos passos

➕ 4. Adicione os arquivos ao Git
git add .

📝 5. Faça o primeiro commit
git commit -a -m "primeiro commit"

🔀 6. git branch -M main
Esse comando renomeia a branch atual para "main".
git branch -M main

🌐 7. Crie um repositório no GitHub
→ Vá para github.com, clique em "New Repository" e crie um repositório vazio (sem README).

🔗 8. Conecte seu projeto local ao GitHub
git remote add origin (Link fornecido)

🚀 9. Envie seu projeto para o GitHub
git push -u origin master

-------------------------------------------------------------------------------------------------------------------------
🧾 Ordem para envio de um repositório:
git add . → Adiciona todos os arquivos modificados
git commit -a -m "mensagem" → Salva o commit com uma mensagem
git push → Envia o commit para o GitHub
💡 Obs: git commit -a -m não inclui arquivos novos — apenas os que já foram rastreados anteriormente com git add


📌 Comandos principais do Git:
git add (nome do arquivo) → Adiciona um arquivo específico ao projeto
git add . → Adiciona todos os arquivos modificados  📍
git status → Mostra o status atual dos arquivos no projeto
git commit (nome do arquivo) -m "mensagem" → Faz commit de um arquivo com mensagem
git commit -a -m "mensagem" → Faz commit de todos os arquivos já adicionados  📍
git push → Envia os commits locais para o GitHub  📍
git pull → Baixa atualizações do GitHub para o seu projeto local
git clone (link HTTPS) . → Clona um repositório (na pasta atual)
⚠️ Use com cuidado: se a pasta não estiver vazia, pode dar erro. O mais comum é: git clone (link HTTPS)

Manipulação de arquivos:
git rm (nome do arquivo) → Remove um arquivo do repositório
⚠️ Precisa fazer os passos (2) e (3) da ordem de envio após isso.
git mv (arquivo) (pasta/arquivo) → Move um arquivo para uma pasta
⚠️ Também exige commit e push depois.
git mv (arquivo) (novo_nome) → Renomeia um arquivo
⚠️ Também exige commit e push depois.
git checkout (nome do arquivo) → Reverte um arquivo para a última versão salva
✅ Ainda funciona, mas o Git moderno recomenda usar: git restore (nome do arquivo)

🧱 .gitignore
O arquivo .gitignore define quais arquivos e pastas devem ser ignorados pelo Git. 📍
Exemplos:
Ignorar um arquivo:
texto.txt
Ignorar todos os arquivos de uma pasta:
assets/*
⚠️ Todos os arquivos dentro da pasta serão ignorados.

♻️ Reset de repositório
git reset --hard origin/master
→ Restaura o repositório local para o estado do GitHub (apaga commits locais que não foram enviados).

-------------------------------------------------------------------------------------------------------------------------
🌿 Branch (Ramificações no Git)
Uma branch é como uma "linha do tempo paralela" do projeto, usada para desenvolver funcionalidades sem interferir no código principal.

🔹 Conceito
Quando um projeto Git é criado, ele inicia na branch padrão chamada master (ou main, no padrão mais atual).
Por padrão, você está trabalhando nela até criar uma nova branch.
Cada nova funcionalidade ou correção geralmente é feita em uma branch separada, para evitar conflitos e manter o código organizado.
🛠️ Vantagens de usar branches:
✅ Permite desenvolver novas ideias sem afetar o código estável
✅ Facilita o trabalho em equipe (cada pessoa pode trabalhar em uma branch diferente)
✅ Ajuda a organizar e revisar as mudanças antes de integrá-las ao projeto principal

-------------------------------------------------------------------------------------------------------------------------
🌿 Branches (Ramificações)
Um branch é como uma linha do tempo separada do projeto. Serve para desenvolver algo sem mexer no código principal.
📌 Comandos principais:
git branch → Lista todos os branches disponíveis.
git branch <nome> → Cria um novo branch.
git branch -d <nome> ou git branch --delete <nome> → Deleta um branch.
⚠️ Não é muito comum deletar branchs locais — normalmente guardamos o histórico.
git checkout <nome> → Muda para outro branch.
git checkout -b <nome> → Cria e já muda para o branch novo.
git merge <nome> → Une o código de outro branch no branch atual.

📦 Git Stash (Guardar alterações temporárias)
O stash é útil quando você está no meio de uma modificação, mas precisa trocar de branch ou pausar o que está fazendo.
📌 Comandos principais:
git stash → Salva as alterações não commitadas em uma “pilha” temporária.
git stash list → Mostra todas as stashes salvas.
git stash show -p <id> → Mostra o que foi modificado na stash.
git stash apply <id> → Recupera uma stash (mantém ela na lista).
git stash drop <id> → Remove uma stash específica.
git stash clear → Remove todas as stashes.
💡 Obs: normalmente o <id> da stash é algo como stash@{0}, stash@{1}, etc.

🏷️ Git Tags (Checkpoints)
As tags funcionam como marcos/checkpoints do projeto. Muito usadas para marcar versões estáveis (ex: v1.0, release-2025).
📌 Comandos principais:
git tag -a <nome> -m "mensagem" → Cria uma nova tag anotada com descrição.
git tag → Lista todas as tags existentes.
git show <nome> → Mostra informações da tag.
git checkout <nome> → Muda para a versão da tag.
git push origin <nome> → Envia uma tag específica para o repositório remoto.
git push origin --tags → Envia todas as tags de uma vez.

-------------------------------------------------------------------------------------------------------------------------

git fetch → Para você ser atualizado de todos os branchs e tags que ainda não estão reconhecidos por você
git remote → Para fazer alguma ação como: adicionar um repo para trackear ou remover
git remote rm <nome> → Para remover 
flag -v → Para ver as origens
git remote add origen <link> → Para adicionar um repo remotamente criado 
git submodule → Para vereficar os submódulos 
git submodule add <repo> → Para adicionar o submódulo
git push --recurse-submodules=on-demand →  Para enviar para o repo do submódulo 

-------------------------------------------------------------------------------------------------------------------------
